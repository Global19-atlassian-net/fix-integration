import org.gradle.plugins.ide.eclipse.model.Classpath

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.puppycrawl.tools:checkstyle:6.5'
    }
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'

defaultTasks 'clean', 'build', 'install'

ext {
    group = fixGroup
    version = fixVersion

    if (!project.hasProperty('ossrhUsername'))
        ossrhUsername = ''

    if (!project.hasProperty('ossrhPassword'))
        ossrhPassword = ''
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'idea'

// Make sure that we use the correct JDK in Eclipse
// There needs to be a JDK8 JVM installed in Eclipse before
// importing the generated projects.
plugins.withType(JavaBasePlugin) {
    eclipse.classpath.file.whenMerged { Classpath path ->
        path.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
            it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
        }
    }
}

group = fixGroup
version = fixVersion

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://repo.marketcetera.org/maven"
    }
}

dependencies {

    testCompile 'org.hamcrest:hamcrest-all:1.3',
                'junit:junit:4.12',
                'org.mockito:mockito-all:1.10.19',
                'quickfixj:quickfixj-msg-fix44:1.5.3',
                'ch.qos.logback:logback-classic:1.1.3',
                'org.apache.mina:mina-core:1.1.0'

    testCompile group: 'quickfixj', name: 'quickfixj-core', version:"1.5.3", configuration: 'test'
    testCompile group: 'uk.co.real-logic', name: 'fix-gateway-core', version:"${fixVersion}", configuration: 'test'
    testCompile group: 'uk.co.real-logic', name: 'fix-gateway-system-tests', version:"${fixVersion}", configuration: 'test'
}

checkstyle {
    configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
    toolVersion = 6.5
}

test {
    testLogging {
        events 'skipped', 'failed'
        showStandardStreams = true
        exceptionFormat = 'full'
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

configurations {
    tests
}


/*
def generatedDir = file("$buildDir/generated-src")
sourceSets {
    generated.java.srcDir generatedDir
}

// Code Generation Configuration
compileGeneratedJava.dependsOn 'generateCodecs'
compileGeneratedJava.dependsOn 'generateMessages'
compileGeneratedJava.classpath += sourceSets.main.runtimeClasspath

task (generateCodecs, type: JavaExec) {
    main = 'fix_gateway.dictionary.GenerationTool'
    classpath = sourceSets.main.runtimeClasspath
    args generatedDir, 'src/main/resources/session_dictionary.xml'
    outputs.dir generatedDir
}
*/

test {
    systemProperties('java.net.preferIPv4Stack': true)
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

