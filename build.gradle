import org.gradle.plugins.ide.eclipse.model.Classpath

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.puppycrawl.tools:checkstyle:6.5'
    }
}

apply plugin: 'maven'
apply plugin: 'signing'

def quickfixVersion = "1.7.0-SNAPSHOT"

defaultTasks 'clean', 'build', 'install'

ext {
    group = fixGroup
    version = fixVersion

    if (!project.hasProperty('ossrhUsername'))
        ossrhUsername = ''

    if (!project.hasProperty('ossrhPassword'))
        ossrhPassword = ''
}

allprojects {
    apply plugin: 'eclipse'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'idea'

    // Make sure that we use the correct JDK in Eclipse
    // There needs to be a JDK8 JVM installed in Eclipse before
    // importing the generated projects.
    plugins.withType(JavaBasePlugin) {
        eclipse.classpath.file.whenMerged { Classpath path ->
            path.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
                it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
            }
        }
    }

    group = fixGroup
    version = fixVersion

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "http://repo.marketcetera.org/maven"
        }
    }

    dependencies {
        compile ("uk.co.real-logic:fix-gateway-codecs:${fixVersion}")

        testCompile 'org.hamcrest:hamcrest-all:1.3',
                'junit:junit:4.12',
                'org.mockito:mockito-all:1.10.19',
                "org.quickfixj:quickfixj-messages-fix42:${quickfixVersion}",
                "org.quickfixj:quickfixj-messages-fix44:${quickfixVersion}",
                "org.quickfixj:quickfixj-core:${quickfixVersion}",
                'ch.qos.logback:logback-classic:1.1.3',
                'org.apache.mina:mina-core:2.0.9',
                "uk.co.real-logic:fix-gateway-core:${fixVersion}"

        testCompile group: 'uk.co.real-logic', name: 'fix-gateway-codecs', version: "${fixVersion}", classifier: 'tests'
        testCompile group: 'uk.co.real-logic', name: 'fix-gateway-core', version: "${fixVersion}", classifier: 'tests'
        testCompile group: 'uk.co.real-logic', name: 'fix-gateway-system-tests', version: "${fixVersion}", classifier: 'tests'
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
        toolVersion = 6.5
    }

    test {
        testLogging {
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    configurations {
        tests
    }

    configurations.all {
        exclude module: 'fix-gateway-session-codecs'
    }

    test {
        systemProperties('java.net.preferIPv4Stack': true)
    }

}

project(':test-framework') {

    task testJar(type: Jar, dependsOn: testClasses) {
        classifier = 'tests'
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    artifacts {
        archives testJar
        tests testJar
    }

}

def getGeneratedDir(project) {
    file("${project.buildDir}/generated-src")
}

configure([project(':fix-42-codecs'), project(':fix-44-codecs')]) {

    def generatedDir = getGeneratedDir(project)

    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += sourceSets.main.runtimeClasspath

    jar {
        from("$buildDir/classes/generated") {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava

    checkstyleGenerated { exclude '**/*' }
}

project(':fix-42-codecs') {

    def generatedDir = getGeneratedDir(project)

    task (generateCodecs, type: JavaExec) {
        main = 'uk.co.real_logic.fix_gateway.dictionary.CodecGenerationTool'
        classpath = sourceSets.main.runtimeClasspath
        args generatedDir, 'src/main/resources/FIX42.xml'
        outputs.dir generatedDir
    }

}

project(':fix-44-codecs') {

    def generatedDir = getGeneratedDir(project)

    task (generateCodecs, type: JavaExec) {
        main = 'uk.co.real_logic.fix_gateway.dictionary.CodecGenerationTool'
        classpath = sourceSets.main.runtimeClasspath
        args generatedDir, 'src/main/resources/FIX44.xml'
        outputs.dir generatedDir
    }

}

project(':test-fix-42') {

    dependencies {
        compile project(path: ':fix-42-codecs')
        testCompile project(path: ':test-framework', configuration: 'tests')
    }

    idea {
        dependencies {
            compile project(':fix-42-codecs').sourceSets.generated.output
        }
    }

}

project(':test-fix-44') {

    dependencies {
        compile project(path: ':fix-44-codecs')
        testCompile project(path: ':test-framework', configuration: 'tests')
    }

    idea {
        dependencies {
            compile project(':fix-44-codecs').sourceSets.generated.output
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}
